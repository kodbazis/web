[{"timestamp":115.541,"fileName":"index.html","content":""},{"timestamp":118.833,"fileName":"index.html","content":"!"},{"timestamp":118.916,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":119.791,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":120.125,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":121.25,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    link\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":121.625,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":122.166,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":122.875,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":124.291,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    \n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":125.083,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":125.666,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":126.041,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":127.791,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":130.333,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    script\n</body>\n</html>"},{"timestamp":130.916,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script></script>\n</body>\n</html>"},{"timestamp":132,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script sr></script>\n</body>\n</html>"},{"timestamp":132.458,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"\"></script>\n</body>\n</html>"},{"timestamp":132.875,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\".\"></script>\n</body>\n</html>"},{"timestamp":133.708,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"./\"></script>\n</body>\n</html>"},{"timestamp":135.083,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":137.208,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    \n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":138.125,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    \n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":138.541,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    \n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":139.208,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    \n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":140.833,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":142.833,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n              \n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":143.25,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n            \n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":144.541,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n            \n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":146.083,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n            \n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":147.458,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n            \n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":150.166,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n            \n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":150.75,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n                \n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":151.708,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":152.041,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":153.875,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":161.583,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":163.791,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":166.875,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":169.25,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n\n            </div>\n            <div class=\"row p-4\">\n                \n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":170.291,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n\n            </div>\n            <div class=\"row p-4\">\n\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              \n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":173.041,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n\n            </div>\n            <div class=\"row p-4\">\n\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              \n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":175.333,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>              \n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":176.708,"fileName":"style.css","content":""},{"timestamp":179.375,"fileName":"style.css","content":"body {\n  background-color: black;\n  color: white !important;\n}\n\n.table {\n  color: white;\n}\n\n.value {\n  color: #E6DB74;\n}\n.id {\n  color: #AE81FF;\n}\n.parentId {\n  color: #AE81FF;\n}\n\ncode {\n  color: #F92672;\n}\n\n.tree,\n.tree ul,\n.tree li {\n  font-size: 18px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n\n.tree {\n  margin: auto;\n  text-align: center;\n}\n.tree,\n.tree ul {\n  display: table;\n}\n.tree ul {\n  width: 100%;\n}\n.tree li {\n  display: table-cell;\n  padding: 0.5em 0;\n  vertical-align: top;\n}\n/* _________ */\n.tree li:before {\n  outline: solid 1px white;\n  content: \"\";\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.tree li:first-child:before {\n  left: 50%;\n}\n.tree li:last-child:before {\n  right: 50%;\n}\n\n.tree code,\n.tree span {\n  border: solid 0.1em white;\n  border-radius: 0.2em;\n  display: inline-block;\n  margin: 0 0.2em 0.5em;\n  padding: 0.2em 0.5em;\n  position: relative;\n}\n/* If the tree represents DOM structure */\n.tree code {\n  font-family: monaco, Consolas, \"Lucida Console\", monospace;\n}\n\n/* | */\n.tree ul:before,\n.tree code:before,\n.tree span:before {\n  outline: solid 1px white;\n  content: \"\";\n  height: 0.5em;\n  left: 50%;\n  position: absolute;\n}\n.tree ul:before {\n  top: -0.5em;\n}\n.tree code:before,\n.tree span:before {\n  top: -0.55em;\n}\n\n/* The root node doesn't connect upwards */\n.tree > li {\n  margin-top: 0;\n}\n.tree > li:before,\n.tree > li:after,\n.tree > li > code:before,\n.tree > li > span:before {\n  outline: none;\n}\n"},{"timestamp":180.375,"fileName":"style.css","content":"body {\n  background-color: black;\n  color: white !important;\n}\n\n.table {\n  color: white;\n}\n\n.value {\n  color: #E6DB74;\n}\n.id {\n  color: #AE81FF;\n}\n.parentId {\n  color: #AE81FF;\n}\n\ncode {\n  color: #F92672;\n}\n\n.tree,\n.tree ul,\n.tree li {\n  font-size: 18px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n\n.tree {\n  margin: auto;\n  text-align: center;\n}\n.tree,\n.tree ul {\n  display: table;\n}\n.tree ul {\n  width: 100%;\n}\n.tree li {\n  display: table-cell;\n  padding: 0.5em 0;\n  vertical-align: top;\n}\n/* _________ */\n.tree li:before {\n  outline: solid 1px white;\n  content: \"\";\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.tree li:first-child:before {\n  left: 50%;\n}\n.tree li:last-child:before {\n  right: 50%;\n}\n\n.tree code,\n.tree span {\n  border: solid 0.1em white;\n  border-radius: 0.2em;\n  display: inline-block;\n  margin: 0 0.2em 0.5em;\n  padding: 0.2em 0.5em;\n  position: relative;\n}\n/* If the tree represents DOM structure */\n.tree code {\n  font-family: monaco, Consolas, \"Lucida Console\", monospace;\n}\n\n/* | */\n.tree ul:before,\n.tree code:before,\n.tree span:before {\n  outline: solid 1px white;\n  content: \"\";\n  height: 0.5em;\n  left: 50%;\n  position: absolute;\n}\n.tree ul:before {\n  top: -0.5em;\n}\n.tree code:before,\n.tree span:before {\n  top: -0.55em;\n}\n\n/* The root node doesn't connect upwards */\n.tree > li {\n  margin-top: 0;\n}\n.tree > li:before,\n.tree > li:after,\n.tree > li > code:before,\n.tree > li > span:before {\n  outline: none;\n}\n"},{"timestamp":185.333,"fileName":"app.js","content":""},{"timestamp":187.541,"fileName":"app.js","content":"let s"},{"timestamp":188.625,"fileName":"app.js","content":"let state"},{"timestamp":189.791,"fileName":"app.js","content":"let state = "},{"timestamp":190.25,"fileName":"app.js","content":"let state = [g]"},{"timestamp":191.083,"fileName":"app.js","content":"let state = []"},{"timestamp":191.875,"fileName":"app.js","content":"let state = [];"},{"timestamp":192.708,"fileName":"app.js","content":"let state = [\n    \n];"},{"timestamp":195.875,"fileName":"app.js","content":"let state = [\n    \n];"},{"timestamp":201.125,"fileName":"app.js","content":"let state = [\n    {\n        id: 1,\n        ertek: \"Élőlények\",\n        szuloId: 0,\n      },\n      {\n        id: 2,\n        ertek: \"Állatok\",\n        szuloId: 1,\n      },\n      {\n        id: 3,\n        ertek: \"Növények\",\n        szuloId: 1,\n      },\n      {\n        id: 4,\n        ertek: \"Gombák\",\n        szuloId: 1,\n      },\n      {\n        id: 5,\n        ertek: \"Kutyák\",\n        szuloId: 2,\n      },\n      {\n        id: 6,\n        ertek: \"Macskák\",\n        szuloId: 2,\n      },\n];"},{"timestamp":203.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n"},{"timestamp":208.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n"},{"timestamp":211.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\n\n"},{"timestamp":219.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\n\n"},{"timestamp":221.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n}\n"},{"timestamp":227.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    \n}\n"},{"timestamp":227.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree\n}\n"},{"timestamp":227.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree()\n}\n"},{"timestamp":228.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n"},{"timestamp":230.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nbuildTree();\n"},{"timestamp":232.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst buildTree();\n"},{"timestamp":233.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa =buildTree();\n"},{"timestamp":234.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree();\n"},{"timestamp":241.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree();\n"},{"timestamp":244.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root);\n"},{"timestamp":245.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root);\n"},{"timestamp":246.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root, );\n"},{"timestamp":248,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root, state);\n"},{"timestamp":250,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root, state);\n"},{"timestamp":253.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":253.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":261.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":264.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":266.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":269.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node) {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":270,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node) {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":272.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":276.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, ) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":277.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":279.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":286.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":289.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":291.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":292.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":294.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":297.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":299.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":301.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":306.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":310.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":313.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":314.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":318.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":321.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":325.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":328.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":329.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":331.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":332.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":338.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":344.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":347.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":351.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  \n\n  buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":353.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  \n\n  buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":363.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  \n\n  buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":366.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  \n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":367.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":373.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":375.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":376.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":382.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":383.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  \n  \n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":385.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n  }\n  \n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":388.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n  }\n  \n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":395.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(node);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":395.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(node);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":399.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(node);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":401.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(node);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":403.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":404.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":407.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":409.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek. buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":409.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":411,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push() buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":414.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push() ;\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":415.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push(buildTree(gyermekElem)) ;\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":417.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push(buildTree(gyermekElem));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":420.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push(buildTree(gyermekElem, ));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":421.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":424.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":426.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":428.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nlog\n"},{"timestamp":429.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log();\n"},{"timestamp":429.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":431.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":435.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":438.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":449.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":452.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":456.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":461.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\n\n"},{"timestamp":462.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction\n"},{"timestamp":462.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction \n"},{"timestamp":464.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction draw\n"},{"timestamp":465.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawtree\n"},{"timestamp":466.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawtree()\n"},{"timestamp":468.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree()\n"},{"timestamp":468.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree()\n"},{"timestamp":470.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree() {}\n"},{"timestamp":470.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree() {\n    \n}\n"},{"timestamp":473.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n}\n"},{"timestamp":475.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n}\n"},{"timestamp":476.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    \n}\n"},{"timestamp":477.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    draw\n}\n"},{"timestamp":478.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTre\n}\n"},{"timestamp":479.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree\n}\n"},{"timestamp":479.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree()\n}\n"},{"timestamp":481.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree(node)\n}\n"},{"timestamp":481.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree(node);\n}\n"},{"timestamp":486.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree(node);\n}\n"},{"timestamp":488,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    \n\n    drawTree(node);\n}\n"},{"timestamp":488.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(9)\n\n    drawTree(node);\n}\n"},{"timestamp":490.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if()\n\n    drawTree(node);\n}\n"},{"timestamp":491.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyer)\n\n    drawTree(node);\n}\n"},{"timestamp":491.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyer)\n\n    drawTree(node);\n}\n"},{"timestamp":493.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyermekek)\n\n    drawTree(node);\n}\n"},{"timestamp":494.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyermekek.len)\n\n    drawTree(node);\n}\n"},{"timestamp":494.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyermekek.length)\n\n    drawTree(node);\n}\n"},{"timestamp":497.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length)\n\n    drawTree(node);\n}\n"},{"timestamp":499.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {}\n\n    drawTree(node);\n}\n"},{"timestamp":499.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":500.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":504.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":506.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":506.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":507.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return ``\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":511,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":511.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<c>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":513.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":513.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code></`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":515.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code></code`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":515.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code></code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":517.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${}</code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":519.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.}</code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":520.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":522.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":525.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n}\n"},{"timestamp":528.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>`\n}\n"},{"timestamp":529.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>`\n}\n"},{"timestamp":537.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n                `\n}\n"},{"timestamp":537.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            `\n}\n"},{"timestamp":541.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n    <ul>\n    ${gyermekekSablon}\n  </ul>`\n}\n"},{"timestamp":543.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n                <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":544.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":548.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":552.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":553.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":555.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":556.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":557.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n  \n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":560.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n  \n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":563,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n  \n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":564.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        \n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":566.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":566.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":568.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":576.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":578.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":583.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":587.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":597.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":599.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":601.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":602.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":602.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":603.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":607.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":608.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":610.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":611.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":613.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":616.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":617.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":621.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":627.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n    <ul class=\"tree\">\n        <li>${drawTree(fa)}</li>\n    </ul>\n`;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":627.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n    <ul class=\"tree\">\n        <li>${drawTree(fa)}</li>\n    </ul>\n`;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":628.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":629.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\n\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":633.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction re\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":634.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction re\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":634.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction render\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":635.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction renderTree() {}\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":636.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":638.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":639,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":641.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\n\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":643.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":644.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":647.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":647.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(9)\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":648.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(9)\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":649.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener()\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":650.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load')\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":651.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', )\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":653.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":657.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTree);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":662.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTb);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":663.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":665.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":665.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\n\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":667.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction \n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":668.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":669.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    \n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":672.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    \n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":675.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML =\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":677.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML =\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":681.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n    <table class=\"table table-striped text-center\">\n        <thead>\n          <tr>\n            <th scope=\"col\">ID</th>\n            <th scope=\"col\">Érték</th>\n            <th scope=\"col\">Szülő ID</th>\n          </tr>\n        </thead>\n        <tbody>\n            \n        </tbody>\n      </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":682.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                \n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":686.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                \n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":687.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                \n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":688.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":690.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":690.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":692,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":692.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":693.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":694.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem =>)}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":694.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":696.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => ``)}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":697.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => ``)}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":699.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                <tr>\n                    <td class=\"id\"></td>\n                    <td class=\"value\"></td>\n                    <td class=\"parentId\"></td>\n                </tr>`)}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":702.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\"></td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":706.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${}</td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":708.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":708.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":710.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":710.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${}</td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":712.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":712.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":715.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":717.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":718.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":718.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":720.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":723.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":730.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":730.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":731.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":731.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":735.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":737.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":740.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":744.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":747.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":749.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":751.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\n\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":753.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":754.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":757.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":759.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":763.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":763.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":766.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":768.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":772.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":773.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":775.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":776.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":779.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n        ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":781.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":786.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":788.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":790.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n        \n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":791.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            \n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":792.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n        ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":793.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":801.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":809.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":814.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":821.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":828.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":831.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":834.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":837.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":840.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction \n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":840.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit() \n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":841.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit() {\n    \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":851.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":851.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":854.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":857.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":859.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":862.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":865.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const \n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":865.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const \n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":866.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const uj\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":867.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":868.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: '',\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":872.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: '',\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":875.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: '',\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":877.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: '',\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":882.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":890.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":898.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":901.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),,\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":901.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":906.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":909.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":911.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":915.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":921.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":925.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":927.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":930.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":933.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":938.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":942.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":944.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":947.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":949.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      st\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":951.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push()\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":951.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push()\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":953.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(uj)\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":954.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem)\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":956.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":956.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":958.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":961.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n      \n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":962.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n      renderTable();\n  renderForm();\n  renderTree();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":963.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":964.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":968.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":972.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":972.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":974.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":977.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":980.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":982.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":987.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":991.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"}]