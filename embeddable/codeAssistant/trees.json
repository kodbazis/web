[{"timestamp":114.541,"fileName":"index.html","content":""},{"timestamp":117.833,"fileName":"index.html","content":"!"},{"timestamp":117.916,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":118.791,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":119.125,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":120.25,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    link\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":120.625,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":121.166,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":121.875,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":123.291,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    \n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":124.083,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":124.666,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":125.041,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":126.791,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>"},{"timestamp":129.333,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    script\n</body>\n</html>"},{"timestamp":129.916,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script></script>\n</body>\n</html>"},{"timestamp":131,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script sr></script>\n</body>\n</html>"},{"timestamp":131.458,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"\"></script>\n</body>\n</html>"},{"timestamp":131.875,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\".\"></script>\n</body>\n</html>"},{"timestamp":132.708,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"./\"></script>\n</body>\n</html>"},{"timestamp":134.083,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":136.208,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    \n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":137.125,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n    \n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":137.541,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    \n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":138.208,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    \n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":139.833,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":141.833,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n              \n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":142.25,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n            \n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":143.541,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n            \n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":145.083,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n            \n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":146.458,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n            \n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":149.166,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n            \n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":149.75,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n                \n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":150.708,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":151.041,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":152.875,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":160.583,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":162.791,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":165.875,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n              \n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":168.25,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n\n            </div>\n            <div class=\"row p-4\">\n                \n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":169.291,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n\n            </div>\n            <div class=\"row p-4\">\n\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              \n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":172.041,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n\n\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n\n\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n\n\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n\n\n            </div>\n            <div class=\"row p-4\">\n\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>\n              \n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":174.333,"fileName":"index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"./bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"./style.css\">\n    <title>Document</title>\n</head>\n<body>\n\n    <div style=\"width: 800px; margin: 10px auto\" class=\"border\">\n        <div class=\"row\" style=\"min-height: 500px\">\n          <div class=\"col-sm-7 border-right pt-5\">\n            <div id=\"tree-component\" style=\"margin: 0 auto\"></div>\n          </div>\n          <div class=\"col-sm-5\">\n            <div class=\"row p-3\">\n              <div id=\"form-component\" class=\"w-100 m-auto\"></div>\n            </div>\n            <div class=\"row p-4\">\n              <div id=\"table-component\" class=\"w-100 border mb-2\" style=\"height: calc(100vh - 350px); overflow-y: scroll;\"></div>              \n              <button class=\"btn btn-sm btn-outline-danger\" id=\"delete-state\">Kiürítés</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    <script src=\"./app.js\"></script>\n</body>\n</html>"},{"timestamp":175.708,"fileName":"style.css","content":""},{"timestamp":178.375,"fileName":"style.css","content":"body {\n  background-color: black;\n  color: white !important;\n}\n\n.table {\n  color: white;\n}\n\n.value {\n  color: #E6DB74;\n}\n.id {\n  color: #AE81FF;\n}\n.parentId {\n  color: #AE81FF;\n}\n\ncode {\n  color: #F92672;\n}\n\n.tree,\n.tree ul,\n.tree li {\n  font-size: 18px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n\n.tree {\n  margin: auto;\n  text-align: center;\n}\n.tree,\n.tree ul {\n  display: table;\n}\n.tree ul {\n  width: 100%;\n}\n.tree li {\n  display: table-cell;\n  padding: 0.5em 0;\n  vertical-align: top;\n}\n/* _________ */\n.tree li:before {\n  outline: solid 1px white;\n  content: \"\";\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.tree li:first-child:before {\n  left: 50%;\n}\n.tree li:last-child:before {\n  right: 50%;\n}\n\n.tree code,\n.tree span {\n  border: solid 0.1em white;\n  border-radius: 0.2em;\n  display: inline-block;\n  margin: 0 0.2em 0.5em;\n  padding: 0.2em 0.5em;\n  position: relative;\n}\n/* If the tree represents DOM structure */\n.tree code {\n  font-family: monaco, Consolas, \"Lucida Console\", monospace;\n}\n\n/* | */\n.tree ul:before,\n.tree code:before,\n.tree span:before {\n  outline: solid 1px white;\n  content: \"\";\n  height: 0.5em;\n  left: 50%;\n  position: absolute;\n}\n.tree ul:before {\n  top: -0.5em;\n}\n.tree code:before,\n.tree span:before {\n  top: -0.55em;\n}\n\n/* The root node doesn't connect upwards */\n.tree > li {\n  margin-top: 0;\n}\n.tree > li:before,\n.tree > li:after,\n.tree > li > code:before,\n.tree > li > span:before {\n  outline: none;\n}\n"},{"timestamp":179.375,"fileName":"style.css","content":"body {\n  background-color: black;\n  color: white !important;\n}\n\n.table {\n  color: white;\n}\n\n.value {\n  color: #E6DB74;\n}\n.id {\n  color: #AE81FF;\n}\n.parentId {\n  color: #AE81FF;\n}\n\ncode {\n  color: #F92672;\n}\n\n.tree,\n.tree ul,\n.tree li {\n  font-size: 18px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n\n.tree {\n  margin: auto;\n  text-align: center;\n}\n.tree,\n.tree ul {\n  display: table;\n}\n.tree ul {\n  width: 100%;\n}\n.tree li {\n  display: table-cell;\n  padding: 0.5em 0;\n  vertical-align: top;\n}\n/* _________ */\n.tree li:before {\n  outline: solid 1px white;\n  content: \"\";\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.tree li:first-child:before {\n  left: 50%;\n}\n.tree li:last-child:before {\n  right: 50%;\n}\n\n.tree code,\n.tree span {\n  border: solid 0.1em white;\n  border-radius: 0.2em;\n  display: inline-block;\n  margin: 0 0.2em 0.5em;\n  padding: 0.2em 0.5em;\n  position: relative;\n}\n/* If the tree represents DOM structure */\n.tree code {\n  font-family: monaco, Consolas, \"Lucida Console\", monospace;\n}\n\n/* | */\n.tree ul:before,\n.tree code:before,\n.tree span:before {\n  outline: solid 1px white;\n  content: \"\";\n  height: 0.5em;\n  left: 50%;\n  position: absolute;\n}\n.tree ul:before {\n  top: -0.5em;\n}\n.tree code:before,\n.tree span:before {\n  top: -0.55em;\n}\n\n/* The root node doesn't connect upwards */\n.tree > li {\n  margin-top: 0;\n}\n.tree > li:before,\n.tree > li:after,\n.tree > li > code:before,\n.tree > li > span:before {\n  outline: none;\n}\n"},{"timestamp":184.333,"fileName":"app.js","content":""},{"timestamp":186.541,"fileName":"app.js","content":"let s"},{"timestamp":187.625,"fileName":"app.js","content":"let state"},{"timestamp":188.791,"fileName":"app.js","content":"let state = "},{"timestamp":189.25,"fileName":"app.js","content":"let state = [g]"},{"timestamp":190.083,"fileName":"app.js","content":"let state = []"},{"timestamp":190.875,"fileName":"app.js","content":"let state = [];"},{"timestamp":191.708,"fileName":"app.js","content":"let state = [\n    \n];"},{"timestamp":194.875,"fileName":"app.js","content":"let state = [\n    \n];"},{"timestamp":200.125,"fileName":"app.js","content":"let state = [\n    {\n        id: 1,\n        ertek: \"Élőlények\",\n        szuloId: 0,\n      },\n      {\n        id: 2,\n        ertek: \"Állatok\",\n        szuloId: 1,\n      },\n      {\n        id: 3,\n        ertek: \"Növények\",\n        szuloId: 1,\n      },\n      {\n        id: 4,\n        ertek: \"Gombák\",\n        szuloId: 1,\n      },\n      {\n        id: 5,\n        ertek: \"Kutyák\",\n        szuloId: 2,\n      },\n      {\n        id: 6,\n        ertek: \"Macskák\",\n        szuloId: 2,\n      },\n];"},{"timestamp":202.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n"},{"timestamp":207.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n"},{"timestamp":210.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\n\n"},{"timestamp":218.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\n\n"},{"timestamp":220.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n}\n"},{"timestamp":226.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    \n}\n"},{"timestamp":226.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree\n}\n"},{"timestamp":226.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree()\n}\n"},{"timestamp":227.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n"},{"timestamp":229.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nbuildTree();\n"},{"timestamp":231.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst buildTree();\n"},{"timestamp":232.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa =buildTree();\n"},{"timestamp":233.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree();\n"},{"timestamp":240.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree();\n"},{"timestamp":243.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root);\n"},{"timestamp":244.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root);\n"},{"timestamp":245.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root, );\n"},{"timestamp":247,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root, state);\n"},{"timestamp":249,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\n\nconst fa = buildTree(root, state);\n"},{"timestamp":252.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":252.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":260.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":263.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":265.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree() {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":268.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node) {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":269,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node) {\n    \n    buildTree();\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":271.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":275.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, ) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":276.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":278.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":285.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":288.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":290.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":291.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":293.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":296.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":298.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":300.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":305.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":309.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":312.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":313.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":317.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":320.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":324.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":327.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    \n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":328.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":330.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":331.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":337.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":343.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n    const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n    if (!csakAGyermekElemek.length) {\n        return {\n          id: node.id,\n          szuloId: node.szuloId,\n          ertek: node.ertek,\n          gyermekek: [],\n        };\n      }\n    \n    buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":346.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":350.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  \n\n  buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":352.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  \n\n  buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":362.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  \n\n  buildTree(node);\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":365.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  \n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":366.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":372.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":374.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":375.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":381.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":382.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  \n  \n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":384.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n  }\n  \n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":387.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n  }\n  \n  buildTree(node);\n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":394.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(node);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":394.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(node);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":398.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(node);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":400.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(node);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":402.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":403.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n      buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":406.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":408.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek. buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":408.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":410,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push() buildTree(gyermekElem);\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":413.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push() ;\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":414.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push(buildTree(gyermekElem)) ;\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":416.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push(buildTree(gyermekElem));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":419.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push(buildTree(gyermekElem, ));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":420.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    \n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":423.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":425.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\n"},{"timestamp":427.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nlog\n"},{"timestamp":428.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log();\n"},{"timestamp":428.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":430.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":434.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  \n\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":437.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":448.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":451.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":455.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n"},{"timestamp":460.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\n\n"},{"timestamp":461.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction\n"},{"timestamp":461.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction \n"},{"timestamp":463.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction draw\n"},{"timestamp":464.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawtree\n"},{"timestamp":465.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawtree()\n"},{"timestamp":467.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree()\n"},{"timestamp":467.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree()\n"},{"timestamp":469.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree() {}\n"},{"timestamp":469.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree() {\n    \n}\n"},{"timestamp":472.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n}\n"},{"timestamp":474.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n}\n"},{"timestamp":475.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    \n}\n"},{"timestamp":476.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    draw\n}\n"},{"timestamp":477.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTre\n}\n"},{"timestamp":478.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree\n}\n"},{"timestamp":478.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree()\n}\n"},{"timestamp":480.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree(node)\n}\n"},{"timestamp":480.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree(node);\n}\n"},{"timestamp":485.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n\n    drawTree(node);\n}\n"},{"timestamp":487,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    \n\n    drawTree(node);\n}\n"},{"timestamp":487.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(9)\n\n    drawTree(node);\n}\n"},{"timestamp":489.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if()\n\n    drawTree(node);\n}\n"},{"timestamp":490.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyer)\n\n    drawTree(node);\n}\n"},{"timestamp":490.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyer)\n\n    drawTree(node);\n}\n"},{"timestamp":492.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyermekek)\n\n    drawTree(node);\n}\n"},{"timestamp":493.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyermekek.len)\n\n    drawTree(node);\n}\n"},{"timestamp":493.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(node.gyermekek.length)\n\n    drawTree(node);\n}\n"},{"timestamp":496.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length)\n\n    drawTree(node);\n}\n"},{"timestamp":498.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {}\n\n    drawTree(node);\n}\n"},{"timestamp":498.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":499.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":503.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":505.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":505.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return \n    }\n\n    drawTree(node);\n}\n"},{"timestamp":506.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return ``\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":510,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":510.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<c>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":512.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":512.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code></`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":514.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code></code`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":514.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code></code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":516.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${}</code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":518.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.}</code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":519.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":521.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n\n    drawTree(node);\n}\n"},{"timestamp":524.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n}\n"},{"timestamp":527.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>`\n}\n"},{"timestamp":528.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>`\n}\n"},{"timestamp":536.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n                `\n}\n"},{"timestamp":536.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            `\n}\n"},{"timestamp":540.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n    <ul>\n    ${gyermekekSablon}\n  </ul>`\n}\n"},{"timestamp":542.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n                <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":543.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":547.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":551.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":552.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    \n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":554.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":555.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":556.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n  \n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":559.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n  \n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":562,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n  \n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":563.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        \n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":565.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":565.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":567.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    drawTree(node);\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":575.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":577.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":582.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":586.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":596.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(fa);\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":598.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":600.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":601.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":601.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":602.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":606.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":607.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\n\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":609.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":610.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":612.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":615.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":616.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":620.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n          <ul class=\"tree\">\n              <li>${drawTree(fa)}</li>\n          </ul>\n      `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":626.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n    <ul class=\"tree\">\n        <li>${drawTree(fa)}</li>\n    </ul>\n`;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":626.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\nconst root = state.find((item) => !item.szuloId);\nconst fa = buildTree(root, state);\nconsole.log(drawTree(fa));\n\ndocument.getElementById(\"tree-component\").innerHTML = `\n    <ul class=\"tree\">\n        <li>${drawTree(fa)}</li>\n    </ul>\n`;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":627.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":628.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\n\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":632.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction re\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":633.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction re\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":633.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction render\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":634.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction renderTree() {}\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":635.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":637.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":638,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":640.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\n\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":642.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":643.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":646.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":646.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(9)\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":647.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(9)\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":648.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener()\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":649.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load')\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":650.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', )\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":652.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":656.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTree);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":661.25,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTb);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":662.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":664.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":664.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\n\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":666.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction \n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":667.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":668.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    \n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":671.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    \n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":674.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML =\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":676.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML =\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":680.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n    <table class=\"table table-striped text-center\">\n        <thead>\n          <tr>\n            <th scope=\"col\">ID</th>\n            <th scope=\"col\">Érték</th>\n            <th scope=\"col\">Szülő ID</th>\n          </tr>\n        </thead>\n        <tbody>\n            \n        </tbody>\n      </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":681.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                \n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":685.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                \n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":686.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                \n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":687.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":689.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":689.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":691,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":691.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":692.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":693.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem =>)}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":693.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":695.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => ``)}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":696.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => ``)}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":698.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                <tr>\n                    <td class=\"id\"></td>\n                    <td class=\"value\"></td>\n                    <td class=\"parentId\"></td>\n                </tr>`)}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":701.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\"></td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":705.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${}</td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":707.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":707.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":709.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\"></td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":709.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${}</td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":711.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":711.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\"></td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":714.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":716.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":717.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":717.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":719.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":722.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                )}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":729.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":729.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":730.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join()}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":730.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":734.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":736.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":739.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":743.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\n\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":746.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":748.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":750.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\n\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":752.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":753.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":756.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":758.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":762.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":762.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":765.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":767.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":771.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":772.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":774.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":775.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n           \n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":778.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n        ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":780.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":785.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":787.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":789.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n        \n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":790.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            \n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":791.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n        ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":792.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":800.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":808.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":813.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":820.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":827.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":830.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":833.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":836.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":839.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction \n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":839.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit() \n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":840.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit() {\n    \n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":850.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":850.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":853.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":856.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":858.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":861.041,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":864.166,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const \n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":864.791,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const \n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":865.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const uj\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":866.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":867.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: '',\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":871.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: '',\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":874.458,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: '',\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":876.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: '',\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":881.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":889.125,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":897.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":900.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),,\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":900.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: '',\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":905.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":908.291,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":910.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":914.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":920.75,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":924.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":926.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":929.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: '',\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":932.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":937.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":941.416,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":943.333,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":946.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":948.541,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      st\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":950.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push()\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":950.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push()\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":952.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(uj)\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":953.875,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem)\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":955.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":955.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":957.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":960.208,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n      \n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":961.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener('load', renderTree);\nwindow.addEventListener('load', renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n    document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `\n}\n\nfunction itemSubmit(e) {\n    e.preventDefault();\n\n    const ujElem = {\n        id: !state.length ? 1 : state[state.length - 1].id + 1,\n        ertek: e.target.elements.ertek.value,\n        szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n      }\n\n      state.push(ujElem);\n      renderTable();\n  renderForm();\n  renderTree();\n\n}\n\nfunction renderTable() {\n    document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state.map(elem => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                ).join('')}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n    const root = state.find((item) => !item.szuloId);\n    const fa = buildTree(root, state);\n    console.log(drawTree(fa));\n\n    document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\n\nfunction drawTree(node) {\n    if(!node.gyermekek.length) {\n        return `<code>${node.ertek}</code>`\n    }\n    \n    let gyermekekSablon = \"\";\n    for (let gyermek of node.gyermekek) {\n        gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n    }\n\n    return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`\n}\n"},{"timestamp":962.083,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":963.958,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":967.375,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":971.666,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":971.916,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":973.625,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":976.833,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":979.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":981.5,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":986.708,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"},{"timestamp":990.583,"fileName":"app.js","content":"let state = [\n  {\n    id: 1,\n    ertek: \"Élőlények\",\n    szuloId: 0,\n  },\n  {\n    id: 2,\n    ertek: \"Állatok\",\n    szuloId: 1,\n  },\n  {\n    id: 3,\n    ertek: \"Növények\",\n    szuloId: 1,\n  },\n  {\n    id: 4,\n    ertek: \"Gombák\",\n    szuloId: 1,\n  },\n  {\n    id: 5,\n    ertek: \"Kutyák\",\n    szuloId: 2,\n  },\n  {\n    id: 6,\n    ertek: \"Macskák\",\n    szuloId: 2,\n  },\n];\n\nfunction buildTree(node, lapos) {\n  const csakAGyermekElemek = lapos.filter((elem) => elem.szuloId === node.id);\n  if (!csakAGyermekElemek.length) {\n    return {\n      id: node.id,\n      szuloId: node.szuloId,\n      ertek: node.ertek,\n      gyermekek: [],\n    };\n  }\n  let gyermekElemek = [];\n  for (let gyermekElem of csakAGyermekElemek) {\n    gyermekElemek.push(buildTree(gyermekElem, lapos));\n  }\n  return {\n    id: node.id,\n    szuloId: node.szuloId,\n    ertek: node.ertek,\n    gyermekek: gyermekElemek,\n  };\n}\n\nwindow.addEventListener(\"load\", renderTree);\nwindow.addEventListener(\"load\", renderTable);\nwindow.addEventListener(\"load\", renderForm);\n\nfunction renderForm() {\n  document.getElementById(\"form-component\").innerHTML = `\n    <form class=\"p-2\" id=\"item-form\" onsubmit=\"itemSubmit(window.event)\">\n        <input class=\"form-control mb-2\" type=\"text\" name=\"ertek\" placeholder=\"Érték\" required />\n        <select class=\"form-control mb-2\" name=\"szuloId\">\n            ${!state.length ? `<option disabled selected value>Szülő elem</option>` : \"\"}\n            ${state.map((elem) => `<option value=\"${elem.id}\">${elem.ertek}</option>`).join()}\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" type=\"submit\" >Hozzáadás</button>\n    </form>\n    `;\n}\n\ndocument.getElementById(\"delete-state\").onclick = function () {\n    state = [];\n    renderTable();\n    renderSelect();\n    renderTree();\n  };\n  \n\nfunction itemSubmit(e) {\n  e.preventDefault();\n\n  const ujElem = {\n    id: !state.length ? 1 : state[state.length - 1].id + 1,\n    ertek: e.target.elements.ertek.value,\n    szuloId: !state.length ? 0 : parseInt(e.target.elements.szuloId.value),\n  };\n\n  state.push(ujElem);\n  renderTable();\n  renderForm();\n  renderTree();\n}\n\nfunction renderTable() {\n  document.getElementById(\"table-component\").innerHTML = `\n        <table class=\"table table-striped text-center\">\n            <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Érték</th>\n                <th scope=\"col\">Szülő ID</th>\n            </tr>\n            </thead>\n            <tbody>\n                ${state\n                  .map(\n                    (elem) => `\n                    <tr>\n                        <td class=\"id\">${elem.id}</td>\n                        <td class=\"value\">${elem.ertek}</td>\n                        <td class=\"parentId\">${elem.szuloId}</td>\n                    </tr>`\n                  )\n                  .join(\"\")}\n            </tbody>\n        </table>\n`;\n}\n\nfunction renderTree() {\n  const root = state.find((item) => !item.szuloId);\n  const fa = buildTree(root, state);\n  console.log(drawTree(fa));\n\n  document.getElementById(\"tree-component\").innerHTML = `\n        <ul class=\"tree\">\n            <li>${drawTree(fa)}</li>\n        </ul>\n    `;\n}\n\nfunction drawTree(node) {\n  if (!node.gyermekek.length) {\n    return `<code>${node.ertek}</code>`;\n  }\n\n  let gyermekekSablon = \"\";\n  for (let gyermek of node.gyermekek) {\n    gyermekekSablon += `<li>${drawTree(gyermek)}</li>`;\n  }\n\n  return `<code>${node.ertek}</code>\n            <ul>\n                ${gyermekekSablon}\n            </ul>`;\n}\n"}]