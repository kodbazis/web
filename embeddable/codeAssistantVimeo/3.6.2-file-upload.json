[
  {
    "timestamp": 0,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 33.933,
    "fileName": "composer.json",
    "content": "{\n    \"require\": {\n        \"claviska/simpleimage\": \"^3.6\"\n    }\n} \n"
  },
  {
    "timestamp": 34.916,
    "fileName": "composer.json",
    "content": "{\n    \"require\": {\n        \"claviska/simpleimage\": \"^3.6\"\n    }\n}\n"
  },
  {
    "timestamp": 55,
    "fileName": "Dockerfile",
    "content": "FROM php:8-apache\nRUN cp /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/\nRUN docker-php-ext-install pdo pdo_mysql\n\n# Képfeldolgozáshoz szükséges könyvtárak\nRUN apt-get update \\\n  && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n  # needed for gd\n  libfreetype6-dev \\\n  libjpeg62-turbo-dev \\\n  libpng-dev \\\n  libwebp-dev \\\n  && rm -rf /var/lib/apt/lists/*\n\nRUN docker-php-ext-install exif\n\n# GD\nRUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \\\n  && docker-php-ext-install -j \"$(nproc)\" gd\n"
  },
  {
    "timestamp": 70.849,
    "fileName": "index.php",
    "content": "<?php\n\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 71.083,
    "fileName": "index.php",
    "content": "<?php\n\n\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 74.166,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 79.083,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\n\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 79.983,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 80.316,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse \n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 88.016,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse cla\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 90.283,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 91.849,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 92.816,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 106.983,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    \n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 111.7,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 112.116,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new \n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 112.799,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new Sim\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 113.7,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage()\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 117.766,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage($fil)\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 118.016,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage($file)\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 119.033,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage($file[])\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 119.816,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage($file[''])\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 120.566,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage($file['tmp'])\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 120.966,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage($file['tmp_'])\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 121.633,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage($file['tmp_name'])\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 125.833,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    new SimpleImage($file['tmp_name']))\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 128.533,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 135.816,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    -\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 136.633,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 140.983,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->auto\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 142.283,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 181.733,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    -\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 182.4,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 183.099,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->be\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 183.216,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->best\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 184.099,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit()\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 194.599,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(60)\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 195.033,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600)\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 195.5,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 60)\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 195.833,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 197.866,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 199.566,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->to\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 200.083,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFi\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 200.383,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFil\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 201.133,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile()\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 213.816,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath)\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 215.5,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . )\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 225.316,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 226.866,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"m\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 227.099,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 227.833,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 235.416,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . )\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 237.933,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \"\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 238.3,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand)\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 238.983,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . )\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 241.366,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 242.266,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".we\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 242.349,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".web\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 242.75,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".webp\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 245.333,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".webp\", )\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 247.05,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 249.683,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 250.183,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 250.883,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/we\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 251.083,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n   \n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file) {\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if(!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName, \n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n    ->autoOrient()\n    ->bestFit(600, 600)\n    ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\")\n\n}\n\nfunction transformToSingleFiles($rawFiles) {\n    \n    $ret = [];\n    for($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 253.25,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 309.449,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        \n    ];\n\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 313.133,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n    ];\n\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 323.733,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n    ];\n\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 325.716,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        \n    ];\n\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 326.633,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 333.283,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    \n\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 333.516,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n    }\n\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 337.5,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n    }\n    (new SimpleImage($file['tmp_name']))\n        ->autoOrient()\n        ->bestFit(600, 600)\n        ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 337.983,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit(600, 600)\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 343.899,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension, 600)\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 344.583,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension[], 600)\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 345.216,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension[''], 600)\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 346.633,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['wid'], 600)\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 347,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], 600)\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 347.466,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension[])\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 348.383,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['h'])\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 348.866,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . \"md-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 350.466,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 350.85,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension[]\"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 351.083,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['l']\"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 351.233,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['la']\"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 351.583,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label']\"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 352.05,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] .\"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 352.649,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n            \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 355.25,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 355.55,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n    \n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 355.8,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 356.55,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 379.75,
    "fileName": "schema.sql",
    "content": "-- phpMyAdmin SQL Dump\n-- version 5.1.0\n-- https://www.phpmyadmin.net/\n--\n-- Gép: pelda_host:3306\n-- Létrehozás ideje: 2021. Júl 06. 19:51\n-- Kiszolgáló verziója: 8.0.25\n-- PHP verzió: 7.4.16\n\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\nSTART TRANSACTION;\nSET time_zone = \"+00:00\";\n\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!40101 SET NAMES utf8mb4 */;\n\n--\n-- Adatbázis: `test_db`\n--\n\n-- --------------------------------------------------------\n\n--\n-- Tábla szerkezet ehhez a táblához `images`\n--\n\nCREATE TABLE `images` ( \n  `id` int NOT NULL,\n  `name` varchar(255) NOT NULL,\n  `type` varchar(255) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n--\n-- Indexek a kiírt táblákhoz\n--\n\n--\n-- A tábla indexei `images`\n--\nALTER TABLE `images`\n  ADD PRIMARY KEY (`id`);\n\n--\n-- A kiírt táblák AUTO_INCREMENT értéke\n--\n\n--\n-- AUTO_INCREMENT a táblához `images`\n--\nALTER TABLE `images`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT;\nCOMMIT;\n\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n"
  },
  {
    "timestamp": 380.25,
    "fileName": "schema.sql",
    "content": "-- phpMyAdmin SQL Dump\n-- version 5.1.0\n-- https://www.phpmyadmin.net/\n--\n-- Gép: pelda_host:3306\n-- Létrehozás ideje: 2021. Júl 06. 19:51\n-- Kiszolgáló verziója: 8.0.25\n-- PHP verzió: 7.4.16\n\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\nSTART TRANSACTION;\nSET time_zone = \"+00:00\";\n\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!40101 SET NAMES utf8mb4 */;\n\n--\n-- Adatbázis: `test_db`\n--\n\n-- --------------------------------------------------------\n\n--\n-- Tábla szerkezet ehhez a táblához `images`\n--\n\nCREATE TABLE `images` (\n  `id` int NOT NULL,\n  `name` varchar(255) NOT NULL,\n  `type` varchar(255) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n--\n-- Indexek a kiírt táblákhoz\n--\n\n--\n-- A tábla indexei `images`\n--\nALTER TABLE `images`\n  ADD PRIMARY KEY (`id`);\n\n--\n-- A kiírt táblák AUTO_INCREMENT értéke\n--\n\n--\n-- AUTO_INCREMENT a táblához `images`\n--\nALTER TABLE `images`\n  MODIFY `id` int NOT NULL AUTO_INCREMENT;\nCOMMIT;\n\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n"
  },
  {
    "timestamp": 399.55,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    \n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 403.316,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    get\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 403.366,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    getC\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 404.699,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    getConnection()\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 405.766,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    getConnection();\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 406.666,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pgetConnection();\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 407.133,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdogetConnection();\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 407.883,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 408.5,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    \n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 409.216,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare();\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 413.016,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 417.483,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 418.383,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 419.1,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->ex\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 420.083,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute()\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 420.85,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([])\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 423.183,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand])\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 423.8,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, ])\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 435.149,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext])\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 436.016,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 437.916,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 463.616,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    \n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 464.266,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return \n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 465.383,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 465.766,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 489.183,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    tr\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 489.399,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try \n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 489.783,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try @\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 490.699,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {}\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 490.966,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        \n    }\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 491.483,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n\n    } catch(Exception $exception) \n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 491.75,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n\n    } catch(Exception $exception) {}\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 492.366,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n\n    } catch(Exception $exception) {\n        \n    }\n\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 498.833,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n\n    } catch(Exception $exception) {\n        \n    }\n    foreach ($dimensions as $dimension) {\n        (new SimpleImage($file['tmp_name']))\n            ->autoOrient()\n            ->bestFit($dimension['width'], $dimension['height'])\n            ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n    }\n\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n    $stmt->execute([$rand, $ext]);\n\n    return true;\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 499.283,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n\n    } catch(Exception $exception) {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n    \n        return true;\n        \n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 499.85,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n    \n        return true;\n    } catch(Exception $exception) {\n        \n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 501.116,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n    \n        return true;\n    } catch(Exception $exception) {\n        \n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 502.366,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n\n        return true;\n    } catch(Exception $exception) {\n        \n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 503.783,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        \n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 505.933,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return \n        \n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 506.85,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return falase\n        \n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 507.383,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 507.85,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 518.633,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        $resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 519.816,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        $isresizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 520.649,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        $isSresizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 521.016,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        $isSuccessresizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 521.316,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 524,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 526.833,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    \n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 528.35,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 530.416,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $is\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 531.049,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isEr\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 531.316,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 532.866,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 534.6,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        \n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 535.266,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if()\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 535.75,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!)\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 536.266,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess)\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 537.1,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) \n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 537.366,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {}\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 538.233,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            \n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 539.049,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $\n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 539.533,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $is\n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 539.833,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isEr\n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 540.299,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError\n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 540.866,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError =\n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 541.383,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = \n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 542.116,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = tru\n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 542.649,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    var_dump($files);\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 550.75,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header()\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 552,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 552.333,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 552.966,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" .)\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 553.166,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . )\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 554.116,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $i)\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 554.649,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError)\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 555.633,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 556.566,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"isE\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 557.1,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"isError\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 557.866,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"isError=1\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 558.866,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"isError=1\" :)\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 559.299,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"isError=1\" : \"\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 560.283,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"?isError=1\" : \"?\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 561,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"?isError=1\" : \"?isS\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 561.399,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"?isError=1\" : \"?isSucc\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 561.899,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"?isError=1\" : \"?isSuccess\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 562.816,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"?isError=1\" : \"?isSuccess=1\")\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 564.383,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    echo \"<pre>\";\n    $files = transformToSingleFiles($_FILES['fajlok']);\n\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . $isError ? \"?isError=1\" : \"?isSuccess=1\");\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 565.816,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 575.366,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    \n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 576.433,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 577.6,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml');\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 580.966,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', );\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 581.35,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', []);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 581.816,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        \n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 582.049,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => \n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 582.283,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images\n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 585,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images,\n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 585.799,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images,\n        \n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 586.033,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images,\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 589.1,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images,\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 591.299,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images,\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        'is' => $_GET['isSuccess'] ?? false,\n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 591.899,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images,\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        'isEr' => $_GET['isSuccess'] ?? false,\n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 592.233,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images,\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        'isError' => $_GET['isSuccess'] ?? false,\n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 594.283,
    "fileName": "index.php",
    "content": "<?php\n\nrequire './vendor/autoload.php';\n\nuse claviska\\SimpleImage;\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/upload-images' => 'uploadHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction homeHandler()\n{\n    $pdo = getConnection();\n    $stmt = $pdo->prepare(\"SELECT * FROM images\");\n    $stmt->execute();\n    $images = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    echo render('home.phtml', [\n        'images' => $images,\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        'isError' => $_GET['isError'] ?? false,\n    ]);\n}\n\nfunction uploadHandler()\n{\n    $files = transformToSingleFiles($_FILES['fajlok']);\n    $isError = false;\n    foreach ($files as $file) {\n        $isSuccess = resizeAndSaveImage($file);\n        if(!$isSuccess) {\n            $isError = true;\n        }\n    }\n\n    header(\"Location: /\" . ($isError ? \"?isError=1\" : \"?isSuccess=1\"));\n}\n\nfunction resizeAndSaveImage($file)\n{\n\n    $whitelist = [IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF];\n\n    if (!in_array(exif_imagetype($file['tmp_name']), $whitelist)) {\n        return false;\n    }\n\n    $rand = uniqid(rand(), true);\n    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);\n\n    $originalFileName = $rand . '.' . $ext;\n    $directoryPath = \"./public/images/\";\n\n    $isMovingSuccessful = file_put_contents(\n        $directoryPath . $originalFileName,\n        file_get_contents($file['tmp_name'])\n    );\n\n    if (!$isMovingSuccessful) {\n        return false;\n    }\n\n    $dimensions = [\n        [\n            'label' => 'sm',\n            'width' => 200,\n            'height' => 200,\n        ],\n        [\n            'label' => 'md',\n            'width' => 600,\n            'height' => 600,\n        ],\n        [\n            'label' => 'lg',\n            'width' => 1200,\n            'height' => 1200,\n        ],\n    ];\n\n    try {\n        foreach ($dimensions as $dimension) {\n            (new SimpleImage($file['tmp_name']))\n                ->autoOrient()\n                ->bestFit($dimension['width'], $dimension['height'])\n                ->toFile($directoryPath . $dimension['label'] . \"-\" . $rand . \".webp\", \"image/webp\");\n        }\n    \n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"INSERT INTO images (name, type) VALUES (?, ?)\");\n        $stmt->execute([$rand, $ext]);\n        return true;\n    } catch(Exception $exception) {\n        return false;\n    }\n}\n\nfunction transformToSingleFiles($rawFiles)\n{\n\n    $ret = [];\n    for ($i = 0; $i < count($rawFiles['name']); $i++) {\n\n        $ret[] = [\n            'name' => $rawFiles['name'][$i],\n            'type' => $rawFiles[\"type\"][$i],\n            'tmp_name' => $rawFiles[\"tmp_name\"][$i],\n            'size' => $rawFiles[\"size\"][$i],\n            'error' => $rawFiles[\"error\"][$i],\n        ];\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n"
  },
  {
    "timestamp": 607.583,
    "fileName": "home.phtml",
    "content": "<!DOCTYPE html> \n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Fájlok feltöltése és képátméretezés</title>\n  <link rel=\"stylesheet\" href=\"/public/css/bootstrap.css\" />\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n</head>\n\n\n<body>\n  <div class=\"container\">\n    <div class=\"p-4 mb-4 bg-light rounded-3\">\n      <div class=\"container\">\n        <h1 class=\"display-5 fw-bold\">Fájlok feltöltése</h1>\n        <p class=\"lead\">És képátméretezés (kicsi, közepes, nagy)</p>\n      </div>\n    </div>\n\n    <?php if ($params['isSuccess'] ?? false) : ?>\n      <div class=\"alert alert-success text-center m-2\">\n        Feltöltés sikeres\n        <i class=\"fa fa-check-circle\"> </i>\n      </div>\n    <?php endif; ?>\n\n    <form action=\"/upload-images\" method=\"POST\" enctype=\"multipart/form-data\">\n      <div class=\"form-row\">\n        <div class=\"mb-3\">\n          <input type=\"file\" name=\"fajlok[]\" multiple class=\"form-control\" placeholder=\"Fájlok\" />\n        </div>\n      </div>\n\n      <button class=\"btn btn-primary\" type=\"submit\">Küldés</button>\n    </form>\n\n    <hr>\n    <div class=\"row\">\n      <?php foreach ($params['images'] ?? [] as $image) : ?>\n        <div class=\"col-4 d-inline-block text-center mb-2\">\n          <img class=\"img-fluid img-thumbnail\" src=\"/public/images/md-<?= $image['name'] ?>.webp\" alt=\"\">\n        </div>\n      <?php endforeach; ?>\n    </div>\n\n  </div>\n</body>\n\n</html>"
  },
  {
    "timestamp": 609.2,
    "fileName": "home.phtml",
    "content": "<!DOCTYPE html> \n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Fájlok feltöltése és képátméretezés</title>\n  <link rel=\"stylesheet\" href=\"/public/css/bootstrap.css\" />\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n</head>\n\n\n<body>\n  <div class=\"container\">\n    <div class=\"p-4 mb-4 bg-light rounded-3\">\n      <div class=\"container\">\n        <h1 class=\"display-5 fw-bold\">Fájlok feltöltése</h1>\n        <p class=\"lead\">És képátméretezés (kicsi, közepes, nagy)</p>\n      </div>\n    </div>\n\n    <?php if ($params['isSuccess'] ?? false) : ?>\n      <div class=\"alert alert-success text-center m-2\">\n        Feltöltés sikeres\n        <i class=\"fa fa-check-circle\"> </i>\n      </div>\n    <?php endif; ?>\n\n    <form action=\"/upload-images\" method=\"POST\" enctype=\"multipart/form-data\">\n      <div class=\"form-row\">\n        <div class=\"mb-3\">\n          <input type=\"file\" name=\"fajlok[]\" multiple class=\"form-control\" placeholder=\"Fájlok\" />\n        </div>\n      </div>\n\n      <button class=\"btn btn-primary\" type=\"submit\">Küldés</button>\n    </form>\n\n    <hr>\n    <div class=\"row\">\n      <?php foreach ($params['images'] ?? [] as $image) : ?>\n        <div class=\"col-4 d-inline-block text-center mb-2\">\n           <img class=\"img-fluid img-thumbnail\" src=\"/public/images/md-<?= $image['name'] ?>.webp\" alt=\"\">\n        </div>\n      <?php endforeach; ?>\n    </div>\n\n  </div>\n</body>\n\n</html>"
  }
]
