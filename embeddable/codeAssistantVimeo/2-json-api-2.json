[
    {
      "timestamp": 0,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars[§i]);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 41.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars[]);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 41.649,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['']);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 42.416,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 52.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 53.466,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    \n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 55.299,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 56.316,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    \n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 56.833,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 57.25,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $st\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 57.95,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 58.783,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement-\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 59.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 59.816,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->ex\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 60.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->exec\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 61.2,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute()\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 62.483,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([])\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 66.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']])\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 67.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 69.383,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    \n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 70.483,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $st\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 71.166,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $statement\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 72.416,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $statement-\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 72.866,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $statement->fe\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 73.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $statement->fet\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 73.916,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $statement->fetch()\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 76.25,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $statement->fetch(PDO::FETCH_ASSOC)\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 77.783,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $statement->fetch(PDO::FETCH_ASSOC);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 82.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $$statement->fetch(PDO::FETCH_ASSOC);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 83.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instr$statement->fetch(PDO::FETCH_ASSOC);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 84.116,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instru$statement->fetch(PDO::FETCH_ASSOC);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 85.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrumen$statement->fetch(PDO::FETCH_ASSOC);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 85.95,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument$statement->fetch(PDO::FETCH_ASSOC);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 86.15,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument $statement->fetch(PDO::FETCH_ASSOC);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 86.599,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    echo \"egyedi hangszer\";\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 94.5,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    echo json;\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 96.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    echo json_e;\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 96.483,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    echo json_en;\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 97.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    echo json_encode;\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 98.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    echo json_encode();\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 99.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    var_dump($vars['id']);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 105.95,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 129.433,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    var_dump($instrument);\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 132.716,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if($instrument);\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 133.233,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument);\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 134.716,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) \n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 134.949,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {}\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 135.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        \n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 137.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 138.233,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $er\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 139.433,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 139.883,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error =\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 140.199,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = \n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 144.483,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = []\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 145.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            \n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 146.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            ''\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 146.866,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error'\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 147.849,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' =>\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 148.166,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => \n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 148.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => []\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 150.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                \n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 151.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                ''\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 152.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 153.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' =\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 153.849,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' =>\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 154.55,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 155.449,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                \n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 155.849,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                ''\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 157,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'me'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 157.949,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'messa'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 158.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 158.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' \n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 159.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' =>\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 162.05,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => \n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 162.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => ''\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 164.566,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'inv'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 164.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invali'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 164.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid '\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 165.3,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid i'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 165.699,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrum'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 166.416,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument i'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 166.666,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 169.449,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 172.066,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        \n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 172.75,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 172.916,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo \n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 173.066,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo j\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 173.349,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo js\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 173.65,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo json\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 175.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo json_encode\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 176.066,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo json_encode()\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 176.433,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo json_encode($error)\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 177.25,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        echo json_encode($error);\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 178.533,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        \n        echo json_encode($error);\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 179.183,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        ht\n        echo json_encode($error);\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 179.55,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http\n        echo json_encode($error);\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 180.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_\n        echo json_encode($error);\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 181.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code()\n        echo json_encode($error);\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 183.516,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404)\n        echo json_encode($error);\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 188.216,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 190.349,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        \n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 191.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 192.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    exit;\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 192.616,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function(FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n\n});\n\nfunction home() {\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars) {\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) {\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if(!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 250.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 251.816,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument'); \n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 256.85,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfu\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 257.449,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction \n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 257.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 258.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    \n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 270.383,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    va\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 270.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 271.666,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump()\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 272.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump($)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 272.333,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump($_)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 272.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump($_PO)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 273.55,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump($_POST)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 274.199,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump($_POST);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 291.116,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    file\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 291.649,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    file_\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 292,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    file_get\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 292.699,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    file_get_contents()\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 293.399,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    file_get_contents('php://input')\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 300.5,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    \n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 302.75,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump(file_get_contents('php://input'))\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 303.366,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump(file_get_contents('php://input'));\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 313.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    var_dump();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 315.8,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 316.316,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_d\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 316.716,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_de\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 317.199,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_decode\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 318.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_decode()\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 318.416,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_decode(file_get_contents('php://input'))\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 319.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_decode(file_get_contents('php://input'), )\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 320.033,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_decode(file_get_contents('php://input'), tr)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 320.35,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_decode(file_get_contents('php://input'), true)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 321.3,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    json_decode(file_get_contents('php://input'), true);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 323.883,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $bojson_decode(file_get_contents('php://input'), true);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 324.566,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body json_decode(file_get_contents('php://input'), true);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 324.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body =json_decode(file_get_contents('php://input'), true);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 324.866,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 326.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    va\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 326.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 327.85,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump()\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 328.35,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 328.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($bod)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 328.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 329.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 339.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    \n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 340.566,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 342.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    \n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 343.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 346.383,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    \n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 346.716,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 355.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        \n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 356.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $b\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 357.35,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 358.616,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body[]\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 358.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['']\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 359.699,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name']\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 360.8,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 361.816,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description']\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 362.516,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 362.75,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['description'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 363.949,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 364.55,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        $body['brand'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 364.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        $body['price'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 365.6,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        $body['price'],\n        $body['price'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 367.333,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        $body['price'],\n        $body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 377.916,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        (9$body['price'],\n        $body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 378.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        ($body['price'],\n        $body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 378.949,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        ()$body['price'],\n        $body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 380.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        (int)$body['price'],\n        $body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 384.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'],\n        $body['description'],\n        $body['brand'],\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 394.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ,\n        $body['description'],\n        $body['brand'],\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 394.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? ,\n        $body['description'],\n        $body['brand'],\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 396.399,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'],\n        $body['brand'],\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 399.566,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ??,\n        $body['brand'],\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 399.8,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? ,\n        $body['brand'],\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 400,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'],\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 401.3,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ,\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 401.616,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?,\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 401.816,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ??,\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 403.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? ,\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 404.149,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'],\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 405.899,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ,\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 406.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ??,\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 407.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? ,\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 407.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? nu,\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 407.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'],\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 409.6,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ??,\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 409.833,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? ,\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 410.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? nul,\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 410.6,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 450.416,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n    \n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 450.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 451.116,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 452.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    \n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 452.8,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $p\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 453.183,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $pdo\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 453.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $pdo-\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 453.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $pdo->\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 454.483,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $pdo->last\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 455.649,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $pdo->lastInsertId()\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 456.75,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 459.366,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $pdo->lastInsertId();\n    \n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 459.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 470.35,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars) \n{\n    header('Content-type: application/json');\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 480.883,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 481.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\n\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 482.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfun\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 483.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction \n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 483.316,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction get\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 483.75,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInst\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 484.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrum\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 484.483,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrument\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 485.233,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentByI\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 485.416,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 486.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById()\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 487.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($)\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 488.033,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 489.149,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) \n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 489.366,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 489.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    \n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 490.616,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 493.366,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    $instrument = $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 495.699,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    \n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 501.866,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    getInstrumentById\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 503.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    getInstrumentById()\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 505.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    getInstrumentById($vars['id'])\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 506.883,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 507.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrumentgetInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 508.3,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument =getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 508.816,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 513.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    \n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 515.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($vars['id']);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 523.033,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo \n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 526.033,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 527.783,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_en\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 527.85,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_enc\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 528.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 529.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode()\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 531.466,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument)\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 532.25,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 534.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 537.366,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    \n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 538.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 586.366,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\n\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 587.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction \n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 587.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 588.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument()\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 588.5,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument() \n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 588.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument() {}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 589.2,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument() {\n    \n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 591,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($) {\n\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 591.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($var) {\n\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 591.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars) {\n\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id) {\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 598.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 599.149,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    \n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 599.783,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 601.183,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    \n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 603.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 621.216,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    \n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 622.299,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 667.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n\n    \n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 668.299,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    \n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 669.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    $statement->rowCount()\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 680.399,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    i\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 681.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    iF\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 682.183,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 682.649,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if()\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 683.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if($statement->rowCount())\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 686.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount())\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 687.066,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) \n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 687.649,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        \n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 691.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ];\n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 701.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 709.466,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\n\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 710.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 711.033,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction \n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 711.35,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction get\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 712.433,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNot\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 712.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFO\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 713.2,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFOu\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 713.516,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFOund\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 714.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFOundBy\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 714.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFOundById\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 715.433,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFOundByIdErro\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 715.616,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFOundByIdError\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 716.166,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError() {}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 718.549,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($i) {}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 718.95,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 719.85,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    \n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 720.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    [\n        'error' => [\n            'id' => $vars['id'],\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 722.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    r[\n        'error' => [\n            'id' => $vars['id'],\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 723.216,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $vars['id'],\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 727.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id$vars['id'],\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 729.166,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = [\n            'error' => [\n                'id' => $vars['id'],\n                'message' => 'invalid instrument id'\n            ]\n        ]; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 734.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = getNotFoundByIdError; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 736.299,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = getNotFoundByIdError(); \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 739.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = getNotFoundByIdError($vars['id']); \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 744.083,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        $error = ; \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 745.166,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        \n        http_response_code(404);\n        echo json_encode($error);\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 746.833,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        \n        http_response_code(404);\n        echo json_encode();\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 748.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        \n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 750.6,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 756.2,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 759.483,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        retu\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 759.833,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 760.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 815.366,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfu\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 815.899,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction \n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 816.183,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 817.299,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument() \n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 817.516,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument() {}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 818.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument() {\n    \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 820.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars) {\n\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if(!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id) {\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 821.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 823.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 824.116,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 825.183,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 869.666,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    get\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 870.5,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getIn\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 872.316,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getInstrumentById\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 873.716,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getInstrumentById()\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 875.2,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getInstrumentById($va)\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 875.333,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getInstrumentById($var)\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 875.666,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getInstrumentById($vars[])\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 876.45,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getInstrumentById($vars['i'])\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 876.766,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getInstrumentById($vars['id'])\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 877.75,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    getInstrumentById($vars['id']);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 879.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $getInstrumentById($vars['id']);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 879.6,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $insgetInstrumentById($vars['id']);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 879.916,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrumegetInstrumentById($vars['id']);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 880.383,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument getInstrumentById($vars['id']);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 880.566,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 888.416,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 889.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 889.25,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if()\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 890.2,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if($)\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 890.799,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if($instru)\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 890.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if($instrument) ]\n    \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 891.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if($instrument)\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 892.583,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument)\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 893.466,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 894,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {}\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 894.299,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        \n    }\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 897.733,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n    }\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 901.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return\n    }\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 902.116,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 904.549,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 905.299,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 905.45,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($)\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 906.95,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument)\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 907.7,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 908.549,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 908.883,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 911.116,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 936.933,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 949.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 951.116,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        \n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 957.75,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $bo\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 957.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $bod\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 958.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 958.783,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body[]\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 959.483,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['']\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 960.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['nam']\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 960.35,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name']\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 965.6,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? \n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 969.166,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 970.533,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument[]\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 971.5,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['']\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 972.033,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['na']\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 972.366,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name']\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 987.966,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 988.533,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        \n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 988.816,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 990.266,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        \n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 990.683,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 991.633,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 993.1,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1012.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1018.45,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    \n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1027.95,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1031.049,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($var);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1031.183,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1031.75,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars[]);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1032.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1033.2,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n    var_dump($body);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1047.283,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1047.599,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    var_dump($instrument);\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1049.016,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    \n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1049.233,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1049.599,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1049.816,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1118.833,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nf\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1119.65,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction \n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1120.45,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction not\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1120.65,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notF\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1120.799,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFo\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1121.066,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoun\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1121.25,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFound\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1122.183,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1123.716,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if(!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler() {\n    \n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1124.549,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler()\n{\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1125.95,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler()\n{\n    \n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1126.216,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        // ... 404 Not Found\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1138.983,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        notFoundHandler\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1139.549,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        notFoundHandler()\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1140.133,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        notFoundHandler();\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        // ... 405 Method Not Allowed\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    },
    {
      "timestamp": 1142.049,
      "fileName": "index.php",
      "content": "<?php\n\nrequire \"./vendor/autoload.php\";\n\n// Router - útvonalválasztó\n// method, path\n\n$dispatcher = FastRoute\\simpleDispatcher(function (FastRoute\\RouteCollector $r) {\n    $r->addRoute('GET', '/', 'home');\n    $r->addRoute('GET', '/api/instruments', 'getAllInstrumentsHandler');\n    $r->addRoute('GET', '/api/instruments/{id}', 'getSingleInstrument');\n    $r->addRoute('POST', '/api/instruments', 'createInstrument');\n    $r->addRoute('PATCH', '/api/instruments/{id}', 'patchInstrument');\n    $r->addRoute('DELETE', '/api/instruments/{id}', 'deleteInstrument');\n});\n\nfunction patchInstrument($vars)\n{\n    header('Content-type: application/json');\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    $body = json_decode(file_get_contents('php://input'), true);\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"UPDATE `instruments` SET \n        `name` = ?,\n        `description` = ?,\n        `brand` = ?,\n        `price` = ?,\n        `quantity` = ?\n        WHERE `id` = ?\n        \"\n    );\n\n    $statement->execute([\n        $body['name'] ?? $instrument['name'],\n        $body['description'] ?? $instrument['description'],\n        $body['brand'] ?? $instrument['brand'],\n        (int)($body['price'] ?? $instrument['price']),\n        (int)($body['quantity'] ?? $instrument['quantity']),\n        $vars['id']\n    ]);\n\n    $instrument = getInstrumentById($vars['id']);\n    echo json_encode($instrument);\n}\n\nfunction deleteInstrument($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"DELETE FROM instruments WHERE id = ?\");\n    $statement->execute([$vars['id']]);\n\n    if (!$statement->rowCount()) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n\n    echo json_encode([\"id\" => $vars['id']]);\n}\n\nfunction createInstrument()\n{\n    header('Content-type: application/json');\n    $body = json_decode(file_get_contents('php://input'), true);\n\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\n        \"INSERT INTO `instruments` \n        (`name`, `description`, `brand`, `price`, `quantity`) \n        VALUES \n        (?, ?, ?, ?, ?)\"\n    );\n    $statement->execute([\n        $body['name'] ?? '',\n        $body['description'] ?? '',\n        $body['brand'] ?? '',\n        (int)$body['price'] ?? null,\n        (int)$body['quantity'] ?? null,\n    ]);\n\n    $id = $pdo->lastInsertId();\n    $instrument = getInstrumentById($id);\n    echo json_encode($instrument);\n}\n\nfunction home()\n{\n    require './build/index.html';\n}\n\nfunction notFoundHandler()\n{\n    require './build/index.html';\n}\n\nfunction getAllInstrumentsHandler($vars)\n{\n    header('Content-type: application/json');\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments\");\n    $statement->execute();\n    $instruments = $statement->fetchAll(PDO::FETCH_ASSOC);\n    echo json_encode($instruments);\n}\n\nfunction getSingleInstrument($vars)\n{\n    header('Content-type: application/json');\n\n    $instrument = getInstrumentById($vars['id']);\n    if (!$instrument) {\n        http_response_code(404);\n        echo json_encode(getNotFoundByIdError($vars['id']));\n        return;\n    }\n    echo json_encode($instrument);\n}\n\nfunction getNotFoundByIdError($id)\n{\n    return [\n        'error' => [\n            'id' => $id,\n            'message' => 'invalid instrument id'\n        ]\n    ];\n}\n\nfunction getInstrumentById($id)\n{\n    $pdo = getConnection();\n    $statement = $pdo->prepare(\"SELECT * FROM instruments WHERE id = ?\");\n    $statement->execute([$id]);\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction getConnection()\n{\n    return new PDO(\n        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname=' . $_SERVER['DB_NAME'],\n        $_SERVER['DB_USER'],\n        $_SERVER['DB_PASSWORD']\n    );\n}\n\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$routeInfo = $dispatcher->dispatch($httpMethod, $uri);\nswitch ($routeInfo[0]) {\n    case FastRoute\\Dispatcher::NOT_FOUND:\n        notFoundHandler();\n        break;\n    case FastRoute\\Dispatcher::METHOD_NOT_ALLOWED:\n        $allowedMethods = $routeInfo[1];\n        notFoundHandler();\n        break;\n    case FastRoute\\Dispatcher::FOUND:\n        $handler = $routeInfo[1];\n        $vars = $routeInfo[2];\n        // ... call $handler with $vars\n        $handler($vars);\n        break;\n}\n"
    }
  ]