[
  {
    "timestamp": 9.216,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n}\n\n\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 9.983,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n}\n\nfunction \n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 10.65,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n}\n\nfunction vali\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 11.949,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n}\n\nfunction validate($sche)\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 12.349,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n}\n\nfunction validate($schema, )\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 13.65,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n}\n\nfunction validate($schema, $body)\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 13.949,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n}\n\nfunction validate($schema, $body) \n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 14.5,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 16.016,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    va\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 17.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    validate()\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 20.983,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    validate(alkalmazottSema())\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 21.883,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    validate(alkalmazottSema(),  )\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 24.916,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 27.933,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    $evalidate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 28.899,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    $errvalidate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 30.966,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    $errorsvalidate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 31.716,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    $errors =validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 31.85,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    echo \"<pre>\";\n    var_dump($_POST);\n    var_dump(alkalmazottSema());\n\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 32.516,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    \n$errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 32.633,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 32.85,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    0$errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 36.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    var\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 37.35,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    var_dump()\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 37.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    var_dump($)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 38.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    var_dump($sch)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 38.516,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    var_dump($schema)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 39.2,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    var_dump($schema);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 39.6,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    \n    var_dump($schema);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 40.25,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \n    var_dump($schema);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 40.566,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"\"\n    var_dump($schema);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 40.766,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<\"\n    var_dump($schema);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 41.066,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\"\n    var_dump($schema);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 41.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump($schema);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 53.716,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(arra);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n"
  },
  {
    "timestamp": 53.983,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(arra);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 55.933,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 94.583,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    \n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 96.65,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $field\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 96.966,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fields\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 98.849,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 100.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    arr\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 100.9,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    arra\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 103.45,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce()\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 112.783,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fi)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 113.733,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 115.566,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 117.416,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 118.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 118.983,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ())\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 119.633,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn () )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 120.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn () => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 124.166,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gy) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 124.666,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyu) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 125.033,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyuj) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 126.283,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujt) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 127.65,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 129.633,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, ) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 135.5,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 135.933,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fie) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 136.466,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $field) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 136.883,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldNa) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 137.199,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 146.066,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => arra)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 147.25,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 147.533,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_)\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 148.699,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge())\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 150.133,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge($gyu))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 150.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge($gyujto))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 151,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge($gyujto, ))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 151.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge($gyujto, []))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 155.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName]))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 156.716,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName =]))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 156.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => ]))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 157.216,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce($fieldNames, fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 160.866,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce(\n        $fieldNames, fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 162.266,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]))\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 167.033,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 167.733,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        \n        )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 170.583,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n        )\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 176,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 181.75,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    \n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 182.466,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    ///\n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 183.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // \n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 183.466,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 189.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $retarray_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 189.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 190.116,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret =array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 190.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 205.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 206.266,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    var\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 207.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    var_dump()\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 207.949,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 208.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n    \n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 231.416,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n\n    \n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 231.55,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    \n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 232.65,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    fore\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 233.166,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($f)\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 233.583,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($field)\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 234.199,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames)\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 234.9,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $)\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 235.65,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) \n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 235.75,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    var_dump(array_keys($schema));\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n    }\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 239.05,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n    \n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n\n    }\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 239.133,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n\n    }\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 240.833,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n    }\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 241.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump(array_keys($schema));\n    }\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 242.199,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n    }\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 242.5,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n        var_dump($fieldName);\n    }\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 243.066,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n    }\n    var_dump($fieldName);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 245.566,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n    }\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 247.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n    }\n    \n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 272.116,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n        \n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 272.716,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n        $schem\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 273.1,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n        $schema\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 274.033,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n        $schema[]\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 277,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n        $schema[$fieldName]\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 278.016,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        var_dump($fieldName);\n        $schema[$fieldName];\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 282.433,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $schema[$fieldName];\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 292.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $val$schema[$fieldName];\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 293.416,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validator$schema[$fieldName];\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 294.166,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 295.399,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        \n    }\n\n    var_dump($schema);\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 296.916,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n\n        var_dump($schema);\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 297.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        var_dump($schema);\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 299.583,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        var_dump($validators);\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 312.983,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        \n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 313.449,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 335.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $va\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 336.199,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validator\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 336.733,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validator[]\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 337.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validator['']\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 338.516,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validator['val']\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 339.116,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validator['validator']\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 340.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validator['validatorF']\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 340.6,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validator['validatorFn']\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 342.433,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validator['validatorFn'];\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 345.616,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn =$validator['validatorFn'];\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 345.933,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 347.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 380.483,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            \n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 381.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $validatorFn\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 382.35,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $validatorFn()\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 387.8,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $validatorFn($body[])\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 388.333,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $validatorFn($body[$])\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 388.833,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $validatorFn($body[$fie])\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 390.133,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $validatorFn($body[$fieldName])\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 392.833,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 403.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $$validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 403.666,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $i$validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 403.966,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $is$validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 404.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isVa$validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 405.3,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFiel$validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 405.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isField$validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 406.199,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldVa$validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 406.283,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid  = $validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 406.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName]);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 408.199,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName]);\n            var_dump($)\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 408.283,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName]);\n            var_dump($is)\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 409.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName]);\n            var_dump($isFieldValid)\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 410.333,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName]);\n            var_dump($isFieldValid);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 464.149,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] );\n            var_dump($isFieldValid);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 464.649,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ??);\n            var_dump($isFieldValid);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 465.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? );\n            var_dump($isFieldValid);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 465.766,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            var_dump($isFieldValid);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 491.566,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if($isFieldValid);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 492.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid);\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 494.133,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {}\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 494.733,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                \n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 497.583,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n    \n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 497.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 498.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 504,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 513.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[]\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 518.049,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[fieldName]\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 519.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName]\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 529.666,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][]\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 530.75,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] =\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 531.016,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = \n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 534.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = []\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 535.766,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    \n                ]\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 536.433,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 537.399,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    \n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 547.716,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    ''\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 548.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'v'\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 548.766,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'valid'\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 549.25,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validator'\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 549.549,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorNam'\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 549.916,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => \n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 553.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator[]\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 555.166,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['']\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 556.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName']\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 556.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    \n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 557.116,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    ''\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 557.75,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'v'\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 558.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value'\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 558.6,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => \n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 562.299,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n            \n        }\n\n    }\n\n\n    var_dump($ret);\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 594.433,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n            \n        }\n\n    }\n\n\nret\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 594.833,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n            \n        }\n\n    }\n\n\nreturn \n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 595.416,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n            \n        }\n\n    }\n\n\nreturn $ret\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 596.633,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema() {\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n    \n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items) {\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper) {\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body) {\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames, \n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if(!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n            \n        }\n\n    }\n\n\nreturn $ret;\n    \n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 597.799,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 598.266,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 619.2,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    \n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 619.399,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 619.7,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $en\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 621.2,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encoded\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 621.95,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedError\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 622.399,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = \n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 623.899,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = json\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 625.333,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = json_encode()\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 625.983,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = json_encode($er)\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 626.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = json_encode($errors)\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 626.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = json_encode($errors);\n    echo $encodedErrors;\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 634.666,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = ;\n    echo $encodedErrors;\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 635.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base;\n    echo $encodedErrors;\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 637.299,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode;\n    echo $encodedErrors;\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 638.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode();\n    echo $encodedErrors;\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 638.633,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    echo $encodedErrors;\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 647.716,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    \n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 648.283,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n}\n\nfunction validate($schema, $body)\n{\n    echo \"<pre>\";\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 651.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n}\n\nfunction validate($schema, $body)\n{\n\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 652.016,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n}\n\nfunction validate($schema, $body)\n{\n\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 652.399,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 664.549,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    header(\"Location: /?errors=\" . $encodedErrors);\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 666.399,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    header(\"Location: /?is);\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 667.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    header(\"Location: /?isSucc);\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 667.2,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    header(\"Location: /?isSuccess=);\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 668.083,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    header(\"Location: /?isSuccess=1);\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 669.116,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 669.883,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 676.166,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    \n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 676.5,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    va\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 676.766,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 677.416,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump()\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 678.033,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump($)\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 678.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump($_)\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 679.25,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump($_GET);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 693.733,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump($_GET[]);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 694.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump($_GET['']);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 695.166,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump($_GET['erro']);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 695.616,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump($_GET['errors']);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 697.916,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(base);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 698.299,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(base_);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 699.866,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(base64_decode());\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 700,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(base64_decode($_GET['errors']));\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 702.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(j);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 703.149,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(json);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 703.733,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(json_);\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 704.899,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(json_decode());\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 705.333,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(json_decode(base64_decode($_GET['errors'])));\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 707.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(json_decode(base64_decode($_GET['errors']), ));\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 708,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(json_decode(base64_decode($_GET['errors']), tr));\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 708.733,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 712.266,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 732.399,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\n\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 732.966,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 734.916,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n\n\n    \n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 735.45,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n\n    \n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 737.283,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n\n    getErrorMessages()\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 738.616,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n\n    getErrorMessages(a)\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 739.899,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n\n    getErrorMessages(alk)\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 740.799,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n\n    getErrorMessages(alkalmazottSema())\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 741.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump(json_decode(base64_decode($_GET['errors']), true));\n    exit;\n\n    getErrorMessages(alkalmazottSema(), )\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 744.966,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    echo \"<pre>\";\n    var_dump();\n    exit;\n\n    getErrorMessages(alkalmazottSema(), )\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 747.45,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $err\n\n    getErrorMessages(alkalmazottSema(), )\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 747.783,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors\n\n    getErrorMessages(alkalmazottSema(), )\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 748.266,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    getErrorMessages(alkalmazottSema(), )\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 751.333,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    getErrorMessages(alkalmazottSema(), $errors)\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 752.1,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 755.966,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $ergetErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 756.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorsgetErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 756.649,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorsMgetErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 756.95,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorsMegetErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 757.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorsMesgetErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 757.399,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 758.016,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 758.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"\"\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 759.049,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\"\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 759.916,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" =\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 760.2,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => \n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 761.299,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 762.016,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 767.299,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    \n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 769.85,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n       \n    ];\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 778.716,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n       \n    ];\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 791.466,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n       \n    ];\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 808.85,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 837.25,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    for\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 838.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 838.866,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach()\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 840.133,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($error)\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 840.533,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors )\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 841,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as )\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 843.416,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField)\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 847.299,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        \n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 847.933,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        var\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 848.666,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        var_dump()\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 849.566,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        var_dump($fieldName)\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 850.35,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        var_dump($fieldName);\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 853.516,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        var_dump($fieldName);\n        var_dump($fieldName);\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 854.566,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        var_dump($fieldName);\n        var_dump($$errorsForField);\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 855.299,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        echo \"<pre>\";\n        var_dump($fieldName);\n        var_dump($$errorsForField);\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 855.899,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        echo \"<pre>\";\n        var_dump($fieldName);\n        var_dump($errorsForField);\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 856.883,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        echo \"<pre>\";\n        var_dump($fieldName);\n        var_dump($errorsForField);\n        exi\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 857.45,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        echo \"<pre>\";\n        var_dump($fieldName);\n        var_dump($errorsForField);\n        exit;\n    }\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 858.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        echo \"<pre>\";\n        var_dump($fieldName);\n        var_dump($errorsForField);\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 865.299,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            \n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 869.7,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 882.166,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            \n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 882.966,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 895.566,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction();\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 897.549,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 902.733,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], );\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 911.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']));\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 913.366,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 921.149,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    \n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 921.683,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 922.116,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret \n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 922.333,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret =\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 922.7,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = \n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 922.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 925.333,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] =$toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 927.783,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    exit;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 929.95,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    ret\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 930.466,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    retur \n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 930.616,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    retur\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 931.466,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return \n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 931.833,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $$\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 932.666,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 932.916,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 933.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n    \n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 933.933,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 934.25,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 938.75,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    var\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 939.899,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    var_dump()\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 940.233,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    var_dump($er)\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 941.183,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    var_dump($errorMessages)\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 941.549,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    var_dump($errorMessages);\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 941.966,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    echo \"<>\"\n    var_dump($errorMessages);\n    exit;\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 942.266,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    echo \"<pre>\"\n    var_dump($errorMessages);\n    exit;\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 943.1,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    echo \"<pre>\";\n    var_dump($errorMessages);\n    exit;\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 954.816,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n    \n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 955.1,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n\n    echo render(\"home.phtml\", [\n        \"isSuccess\" => false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 957.95,
    "fileName": "home.phtml",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Form validáció</title>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.0.2/css/bootstrap.min.css\" integrity=\"sha512-usVBAd66/NpVNfBge19gws2j6JZinnca12rAe2l+d+QkLU9fiG02O1X8Q6hepIpr/EYKZvKx/I9WsnujJuOmBA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n</head>\n\n<body>\n  <?php\n\n  $isValidClass = function ($key) use ($params) {\n    if (!$params['errorMessages']) {\n      return \"\";\n    }\n    return count($params['errorMessages'][$key] ?? []) ? \"is-invalid\" : \"is-valid\";\n  };\n  ?>\n  <div class=\"container\">\n    <div class=\"p-4 mb-4 bg-light rounded-3\">\n      <div class=\"container\">\n        <h1 class=\"display-5 fw-bold\">Form validáció</h1>\n        <p class=\"lead\">Példa: Új alkalmazott</p>\n      </div>\n    </div>\n\n    <?php if ($params['isSuccess']) : ?>\n      <div class=\"alert alert-success text-center m-2\">\n        <i class=\"fa fa-check-circle display-1\"> </i>\n      </div>\n    <?php endif; ?>\n\n    <form action=\"/new-employee\" method=\"POST\" class=\"m-2\">\n      <div class=\"form-row\">\n        <div class=\"mb-3\">\n          Név:\n          <input type=\"text\" name=\"name\" value=\"<?= $params['values']['name'] ?? '' ?>\" class=\"form-control <?= $isValidClass('name') ?>\" placeholder=\"Név\" />\n          <div class=\"invalid-feedback\">\n            <?php foreach ($params['errorMessages']['name'] as $error) : ?>\n              <?= $error ?> <br />\n            <?php endforeach; ?>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-row\">\n        <div class=\"mb-3\">\n          Szerepkör:\n          <select class=\"custom-select form-control <?= $isValidClass('role') ?> \" name=\"role\">\n            <option value=\"worker\" <?= ($params['values']['role'] ?? '') === \"worker\" ? 'selected' : '' ?>>Dolgozó</option>\n            <option value=\"manager\" <?= ($params['values']['role'] ?? '') === \"manager\" ? 'selected' : '' ?>>Menedzser</option>\n            <option value=\"leader\" <?= ($params['values']['role'] ?? '') === \"leader\" ? 'selected' : '' ?>>Vezető</option>\n          </select>\n          <div class=\"invalid-feedback\">\n            <?php foreach ($params['errorMessages']['role'] as $error) : ?>\n              <?= $error ?> <br />\n            <?php endforeach; ?>\n          </div>\n        </div>\n        <div class=\"mb-3\">\n          Életkor\n          <input type=\"number\" name=\"age\" value=\"<?= $params['values']['age'] ?? '' ?>\" class=\"form-control <?= $isValidClass('age') ?>\" placeholder=\"Életkor\" />\n          <div class=\"invalid-feedback\">\n            <?php foreach ($params['errorMessages']['age'] as $error) : ?>\n              <?= $error ?> <br />\n            <?php endforeach; ?>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          Munkabér:\n          <input type=\"text\" class=\"form-control <?= $isValidClass('salary') ?>\" name=\"salary\" value=\"<?= $params['values']['salary'] ?? '' ?>\" placeholder=\"Munkabér\" />\n\n          <div class=\"invalid-feedback\">\n            <?php foreach ($params['errorMessages']['salary'] as $error) : ?>\n              <?= $error ?> <br />\n            <?php endforeach; ?>\n          </div>\n        </div>\n      </div>\n      <div class=\"mb-3\">\n        Email (opcionális):\n        <div class=\"input-group\">\n          <div class=\"input-group-prepend\">\n            <span class=\"input-group-text\">@</span>\n          </div>\n          <input type=\"text\" class=\"form-control <?= $isValidClass('email') ?>\" placeholder=\"Email\" name=\"email\" value=\"<?= $params['values']['email'] ?? '' ?>\" />\n\n          <div class=\"invalid-feedback\">\n            <?php foreach ($params['errorMessages']['email'] as $error) : ?>\n              <?= $error ?> <br />\n            <?php endforeach; ?>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group mb-2\">\n        <div class=\"form-check\">\n          <input class=\"form-check-input <?= $isValidClass('isVerified') ?>\" type=\"checkbox\" name=\"isVerified\" <?= $params['values']['isVerified'] ?? '' ? 'checked' : '' ?> />\n          <label class=\"form-check-label\">Elfogadom a felhasználói feltételeket</label>\n\n          <div class=\"invalid-feedback\">\n            <?php foreach ($params['errorMessages']['isVerified'] as $error) : ?>\n              <?= $error ?> <br />\n            <?php endforeach; ?>\n          </div>\n        </div>\n      </div>\n\n      <button class=\"btn btn-primary\" type=\"submit\">Küldés</button>\n    </form>\n  </div>\n</body>\n\n</html>"
  },
  {
    "timestamp": 974.45,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    // header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 982.716,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 983.35,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    \n    header(\"Location: /?errors=\" . $encodedErrors);\n    \n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 985.316,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n\n    header(\"Location: /?errors=\" . $encodedErrors);\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 985.7,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    $encodedErrors = base64_encode(json_encode($errors));\n    header(\"Location: /?errors=\" . $encodedErrors);\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 986.5,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    \n    $encodedErrors = base64_encode(json_encode($errors));\n    header(\"Location: /?errors=\" . $encodedErrors);\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 988.1,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n    $encodedErrors = base64_encode(json_encode($errors));\n    header(\"Location: /?errors=\" . $encodedErrors);\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 989.216,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n    $encodedErrors = base64_encode(json_encode($errors));\n    header(\"Location: /?errors=\" . $encodedErrors);\n    \n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 989.7,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n    $encodedErrors = base64_encode(json_encode($errors));\n    header(\"Location: /?errors=\" . $encodedErrors);\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 990.85,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors);\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 992.433,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors);\n        re\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 992.883,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors);\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1004.85,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors);\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1022.899,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1040.549,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1041.016,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        \n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1041.283,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1077.849,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        \n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1078.516,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n\n        \n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1079.083,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        \n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1081.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1084.466,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        \n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1084.95,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n\n        \n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1085.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n        \n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1085.833,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        \n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1086.283,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors']), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1154.2,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1155.383,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"[\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1155.933,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1166.266,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors ?? );\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1166.566,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors ?? []);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1193.066,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\n\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors ?? []);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1193.983,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\n/\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors ?? []);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1194.549,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\n//\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors ?? []);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1194.799,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\n// \n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors ?? []);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  },
  {
    "timestamp": 1195.033,
    "fileName": "index.php",
    "content": "<?php\n\n$routes = [\n    'GET' => [\n        '/' => 'homeHandler',\n    ],\n    'POST' => [\n        '/new-employee' => 'newEmployeeHandler',\n    ],\n];\n\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$method = $_SERVER[\"REQUEST_METHOD\"];\n\n$handlerFunction = $routes[$method][$path] ?? function () {\n    http_response_code(404);\n    echo \"Oldal nem található\";\n};\n\n$handlerFunction();\n\nfunction alkalmazottSema()\n{\n    $alkalmazottSema = [\n        \"name\" => [kotelezo(), maxHossz(30)],\n        \"role\" => [kotelezo(), valasztasiLehetosegek(\"manager\", \"leader\", \"worker\")],\n        \"age\" => [kotelezo(), kozott(18, 120)],\n        \"salary\" => [kotelezo(), nagyobbMint(0)],\n        \"email\" => [emailFormatum()],\n        \"isVerified\" => [kotelezo()],\n    ];\n\n    return toSchema($alkalmazottSema);\n}\n\nfunction toSchema($items)\n{\n    $ret = [];\n    foreach ($items as $key => $value) {\n        $ret[$key] = array_reduce($value, fn ($acc, $item) => array_merge($acc, [$item['validatorName'] => $item]), []);\n    }\n    return $ret;\n}\n\nfunction valasztasiLehetosegek(...$options)\n{\n    return [\n        \"validatorName\" => \"enum\",\n        \"validatorFn\" => fn ($input) => in_array($input, $options),\n        \"params\" => implode(\", \", $options)\n    ];\n}\n\n\nfunction emailFormatum()\n{\n    return [\n        \"validatorName\" => \"email\",\n        \"validatorFn\" => fn ($input) => filter_var($input, FILTER_VALIDATE_EMAIL),\n        \"params\" => null\n    ];\n}\n\nfunction nagyobbMint($lower)\n{\n    return [\n        \"validatorName\" => \"largerThan\",\n        \"validatorFn\" => fn ($input) => $input > $lower,\n        \"params\" => $lower\n    ];\n}\n\nfunction maxHossz($length)\n{\n    return [\n        \"validatorName\" => \"maxLength\",\n        \"validatorFn\" => fn ($input) => strlen($input) < $length,\n        \"params\" => $length\n    ];\n}\n\n\n// https://symfony.com/doc/current/validation.html#constraints\n\nfunction kozott($lower, $upper)\n{\n    return [\n        \"validatorName\" => \"between\",\n        \"validatorFn\" => function ($input) use ($lower, $upper) {\n            return $input >= $lower && $input <= $upper;\n        },\n        \"params\" => [$lower, $upper]\n    ];\n}\n\nfunction kotelezo()\n{\n    return [\n        \"validatorName\" => \"required\",\n        \"validatorFn\" => function ($input) {\n            return (bool)$input;\n        },\n        \"params\" => null\n    ];\n}\n\nfunction getErrorMessages($schema, $errors)\n{\n    $validatorNameToMessage = [\n        \"required\" => fn () => \"Mező megadása kötelező.\",\n        \"largerThan\" => fn ($value, $param) => \"Mező nagyobb kell legyen mint $param. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"maxLength\" => fn ($value, $param) => \"Mező kevesebb karakterből álljon mint $param. \" . strlen($value) . \" karakter lett megadva.\",\n        \"between\" =>  fn ($value, $params) => \"Mező értékének \" .  $params[0] . \" és \" . $params[1] . \" között kell lennie. \" . (!$value ? \"Semmi nem\" : $value) . \" lett megadva.\",\n        \"enum\" => fn ($value, $param) =>  \"Mező a következő értékek valamelyikének kell lennie: \" .  $param . \". \" . ((int)$value ?? \"Semmi nem\") . \" lett megadva.\",\n        \"email\" => fn ($value, $param) => \"Mező értéknek érvényes email címnek kell lennie. '\" . ($value ?? \"nothing\") . \"' lett megadva.\",\n    ];\n\n    $ret = [];\n    foreach ($errors as $fieldName => $errorsForField) {\n        foreach ($errorsForField as $err) {\n            $toMessageFunction = $validatorNameToMessage[$err['validatorName']];\n            $schemaForField = $schema[$fieldName];\n            $ret[$fieldName][] = $toMessageFunction($err['value'], $schemaForField[$err['validatorName']]['params']);\n        }\n    }\n    return $ret;\n}\n\nfunction homeHandler()\n{\n    $errors = json_decode(base64_decode($_GET['errors'] ?? \"\"), true);\n\n    $errorMessages = getErrorMessages(alkalmazottSema(), $errors ?? []);\n\n    echo render(\"home.phtml\", [\n        'isSuccess' => $_GET['isSuccess'] ?? false,\n        \"errorMessages\" => $errorMessages,\n        'values' => json_decode(base64_decode($_GET['values'] ?? ''), true),\n    ]);\n}\n\nfunction isError ($errors) {\n    return count(array_reduce(array_values($errors), 'array_merge', []));\n}\n\nfunction newEmployeeHandler()\n{\n    $errors = validate(alkalmazottSema(), $_POST);\n\n    if (isError($errors)) {\n        $encodedErrors = base64_encode(json_encode($errors));\n        header(\"Location: /?errors=\" . $encodedErrors . \"&values=\" . base64_encode(json_encode($_POST)));\n        return;\n    }\n\n    header(\"Location: /?isSuccess=1\");\n}\n\nfunction validate($schema, $body)\n{\n    $fieldNames = array_keys($schema);\n\n    // https://kodbazis.hu/cikkek/a-leghasznosabb-tombfuggvenyek\n    $ret = array_reduce(\n        $fieldNames,\n        fn ($gyujto, $fieldName) => array_merge($gyujto, [$fieldName => []]),\n        []\n    );\n\n    foreach ($fieldNames as $fieldName) {\n        $validators = $schema[$fieldName];\n\n        $isRequiredField = count(array_filter($validators, fn ($validator) => $validator['validatorName'] === 'required'));\n\n        if (!$isRequiredField && !($body[$fieldName] ?? null)) {\n            continue;\n        }\n\n\n        foreach ($validators as $validator) {\n            $validatorFn = $validator['validatorFn'];\n            $isFieldValid = $validatorFn($body[$fieldName] ?? null);\n            if (!$isFieldValid) {\n                $ret[$fieldName][] = [\n                    'validatorName' => $validator['validatorName'],\n                    'value' => $body[$fieldName] ?? null\n                ];\n            }\n        }\n    }\n\n    return $ret;\n}\n\nfunction render($path, $params = [])\n{\n    ob_start();\n    require __DIR__ . '/views/' . $path;\n    return ob_get_clean();\n}\n"
  }
]
